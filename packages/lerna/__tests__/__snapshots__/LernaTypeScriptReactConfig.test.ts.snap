// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`given mode: "development", env: "undefined", argv: "{"liveReload":false,"hot":false}" given TypeScriptConfig should match snapshot 1`] = `
Object {
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "exclude": /node_modules/,
        "test": /\\\\\\.tsx\\?/,
        "use": Array [
          Object {
            "loader": "cache-loader",
          },
          Object {
            "loader": "babel-loader",
            "options": Object {
              "presets": Array [
                Array [
                  "@babel/preset-env",
                ],
                Array [
                  "@babel/preset-react",
                ],
                Array [
                  "@babel/preset-typescript",
                ],
              ],
            },
          },
          Object {
            "loader": "ts-loader",
            "options": Object {
              "happyPackMode": false,
              "projectReferences": true,
              "transpileOnly": true,
            },
          },
        ],
      },
    ],
  },
  "output": Object {
    "filename": "./packages/[name]/lib/index.js",
    "path": "./",
  },
  "plugins": Array [
    ForkTsCheckerWebpackPlugin {
      "options": Object {
        "eslint": Object {
          "enabled": true,
          "files": "./packages/**/src/*.{ts,tsx,js,jsx}",
        },
        "typescript": Object {
          "diagnosticOptions": Object {
            "semantic": true,
            "syntactic": true,
          },
        },
      },
    },
  ],
  "resolve": Object {
    "extensions": Array [
      ".js",
      ".ts",
      ".tsx",
    ],
    "modules": Array [
      "./",
      ".//./packages",
      "node_modules",
    ],
    "plugins": Array [
      TsconfigPathsPlugin {
        "apply": [MockFunction],
      },
    ],
  },
}
`;

exports[`given mode: "development", env: "undefined", argv: "{"liveReload":true,"hot":true}" given TypeScriptConfig should match snapshot 1`] = `
Object {
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "exclude": /node_modules/,
        "test": /\\\\\\.tsx\\?/,
        "use": Array [
          Object {
            "loader": "cache-loader",
          },
          Object {
            "loader": "babel-loader",
            "options": Object {
              "plugins": Array [
                "react-hot-loader/babel",
              ],
              "presets": Array [
                Array [
                  "@babel/preset-env",
                ],
                Array [
                  "@babel/preset-react",
                ],
                Array [
                  "@babel/preset-typescript",
                ],
              ],
            },
          },
          Object {
            "loader": "ts-loader",
            "options": Object {
              "happyPackMode": false,
              "projectReferences": true,
              "transpileOnly": true,
            },
          },
        ],
      },
    ],
  },
  "output": Object {
    "filename": "./packages/[name]/lib/index.js",
    "path": "./",
  },
  "plugins": Array [
    ForkTsCheckerWebpackPlugin {
      "options": Object {
        "eslint": Object {
          "enabled": true,
          "files": "./packages/**/src/*.{ts,tsx,js,jsx}",
        },
        "typescript": Object {
          "diagnosticOptions": Object {
            "semantic": true,
            "syntactic": true,
          },
        },
      },
    },
  ],
  "resolve": Object {
    "alias": Object {
      "react-dom": "@hot-loader/react-dom",
    },
    "extensions": Array [
      ".js",
      ".ts",
      ".tsx",
    ],
    "modules": Array [
      "./",
      ".//./packages",
      "node_modules",
    ],
    "plugins": Array [
      TsconfigPathsPlugin {
        "apply": [MockFunction],
      },
    ],
  },
  "target": "web",
}
`;

exports[`given mode: "development", env: "undefined", argv: "{"mode":"development"}" given TypeScriptConfig should match snapshot 1`] = `
Object {
  "mode": "development",
  "module": Object {
    "rules": Array [
      Object {
        "exclude": /node_modules/,
        "test": /\\\\\\.tsx\\?/,
        "use": Array [
          Object {
            "loader": "cache-loader",
          },
          Object {
            "loader": "babel-loader",
            "options": Object {
              "presets": Array [
                Array [
                  "@babel/preset-env",
                ],
                Array [
                  "@babel/preset-react",
                ],
                Array [
                  "@babel/preset-typescript",
                ],
              ],
            },
          },
          Object {
            "loader": "ts-loader",
            "options": Object {
              "happyPackMode": false,
              "projectReferences": true,
              "transpileOnly": true,
            },
          },
        ],
      },
    ],
  },
  "output": Object {
    "filename": "./packages/[name]/lib/index.js",
    "path": "./",
  },
  "plugins": Array [
    ForkTsCheckerWebpackPlugin {
      "options": Object {
        "eslint": Object {
          "enabled": true,
          "files": "./packages/**/src/*.{ts,tsx,js,jsx}",
        },
        "typescript": Object {
          "diagnosticOptions": Object {
            "semantic": true,
            "syntactic": true,
          },
        },
      },
    },
  ],
  "resolve": Object {
    "extensions": Array [
      ".js",
      ".ts",
      ".tsx",
    ],
    "modules": Array [
      "./",
      ".//./packages",
      "node_modules",
    ],
    "plugins": Array [
      TsconfigPathsPlugin {
        "apply": [MockFunction],
      },
    ],
  },
}
`;

exports[`given mode: "production", env: "undefined", argv: "{"liveReload":true,"hot":true}" given TypeScriptConfig should match snapshot 1`] = `
Object {
  "mode": "production",
  "module": Object {
    "rules": Array [
      Object {
        "exclude": /node_modules/,
        "test": /\\\\\\.tsx\\?/,
        "use": Array [
          Object {
            "loader": "cache-loader",
          },
          Object {
            "loader": "babel-loader",
            "options": Object {
              "presets": Array [
                Array [
                  "@babel/preset-env",
                ],
                Array [
                  "@babel/preset-react",
                ],
                Array [
                  "@babel/preset-typescript",
                ],
              ],
            },
          },
          Object {
            "loader": "ts-loader",
            "options": Object {
              "happyPackMode": false,
              "projectReferences": true,
              "transpileOnly": true,
            },
          },
        ],
      },
    ],
  },
  "output": Object {
    "filename": "./packages/[name]/lib/index.min.js",
    "path": "./",
  },
  "resolve": Object {
    "extensions": Array [
      ".js",
      ".ts",
      ".tsx",
    ],
    "modules": Array [
      "./",
      ".//./packages",
      "node_modules",
    ],
    "plugins": Array [
      TsconfigPathsPlugin {
        "apply": [MockFunction],
      },
    ],
  },
}
`;

exports[`given mode: "production", env: "undefined", argv: "{"mode":"production"}" given TypeScriptConfig should match snapshot 1`] = `
Object {
  "mode": "production",
  "module": Object {
    "rules": Array [
      Object {
        "exclude": /node_modules/,
        "test": /\\\\\\.tsx\\?/,
        "use": Array [
          Object {
            "loader": "cache-loader",
          },
          Object {
            "loader": "babel-loader",
            "options": Object {
              "presets": Array [
                Array [
                  "@babel/preset-env",
                ],
                Array [
                  "@babel/preset-react",
                ],
                Array [
                  "@babel/preset-typescript",
                ],
              ],
            },
          },
          Object {
            "loader": "ts-loader",
            "options": Object {
              "happyPackMode": false,
              "projectReferences": true,
              "transpileOnly": true,
            },
          },
        ],
      },
    ],
  },
  "output": Object {
    "filename": "./packages/[name]/lib/index.min.js",
    "path": "./",
  },
  "plugins": Array [
    ForkTsCheckerWebpackPlugin {
      "options": Object {
        "eslint": Object {
          "enabled": true,
          "files": "./packages/**/src/*.{ts,tsx,js,jsx}",
        },
        "typescript": Object {
          "diagnosticOptions": Object {
            "semantic": true,
            "syntactic": true,
          },
        },
      },
    },
  ],
  "resolve": Object {
    "extensions": Array [
      ".js",
      ".ts",
      ".tsx",
    ],
    "modules": Array [
      "./",
      ".//./packages",
      "node_modules",
    ],
    "plugins": Array [
      TsconfigPathsPlugin {
        "apply": [MockFunction],
      },
    ],
  },
}
`;
